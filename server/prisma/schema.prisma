generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userID                      String               @id @default(uuid()) @db.Uuid
  name                        String               @db.VarChar(100)
  username                    String               @db.VarChar(50)
  email                       String               @unique @db.VarChar(100)
  passwordHash                String?              @db.VarChar(255)
  tokens                      Json?                @db.Json
  otp                         String?              @db.VarChar(6)
  otpExpiresAt                DateTime?            @db.Timestamp(6)
  otpVerified                 Boolean              @default(false)
  googleId                    String?              @unique @db.VarChar(255)
  createdAt                   DateTime             @default(now()) @db.Timestamp(6)
  updatedAt                   DateTime             @updatedAt @db.Timestamp(6)
  accessRequest               AccessRequest[]      @relation("UserRequest")
  AuditTrail                  AuditTrail[]
  createdLists                List[]               @relation("ListCreatedBy")
  updatedLists                List[]               @relation("ListUpdatedBy")
  lists                       List[]               @relation("UserLists")
  createdQuestions            Question[]           @relation("CreatedQuestions")
  updatedQuestions            Question[]           @relation("UpdatedQuestions")
  UserQuestionStatusCreatedBy UserQuestionStatus[] @relation("UserQuestionStatusCreatedBy")
  UserQuestionStatusUpdatedBy UserQuestionStatus[] @relation("UserQuestionStatusUpdatedBy")
  userQuestionStatuses        UserQuestionStatus[] @relation("UserQuestionStatuses")

}

model List {
  listID             String               @id @default(uuid()) @db.Uuid
  name               String               @db.VarChar(150)
  isPublic           Boolean
  description        String
  isDeleted          Boolean              @default(false)
  createdAt          DateTime             @default(now()) @db.Timestamp(6)
  updatedAt          DateTime             @updatedAt @db.Timestamp(6)
  userID             String               @db.Uuid
  updatedById        String               @db.Uuid
  createdById        String               @db.Uuid
  accessRequest      AccessRequest[]      @relation("AccessRequest")
  createdBy          User                 @relation("ListCreatedBy", fields: [createdById], references: [userID])
  updatedBy          User                 @relation("ListUpdatedBy", fields: [updatedById], references: [userID])
  user               User                 @relation("UserLists", fields: [userID], references: [userID])
  questions          ListQuestion[]
  UserQuestionStatus UserQuestionStatus[]
  tags               Tag[]                @relation("ListToTag")
}

model AccessRequest {
  id        String       @id @default(uuid()) @db.Uuid
  userID    String       @db.Uuid
  listID    String       @db.Uuid
  createdAt DateTime     @default(now()) @db.Timestamp(6)
  status    AccessStatus @default(PENDING)
  list      List         @relation("AccessRequest", fields: [listID], references: [listID])
  user      User         @relation("UserRequest", fields: [userID], references: [userID])

  @@unique([userID, listID])
}

model Question {
  questionID         String               @id @default(uuid()) @db.Uuid
  title              String               @db.VarChar(255)
  link               String
  createdAt          DateTime             @default(now()) @db.Timestamp(6)
  updatedAt          DateTime             @updatedAt @db.Timestamp(6)
  createdById        String               @db.Uuid
  updatedById        String               @db.Uuid
  lists              ListQuestion[]
  createdBy          User                 @relation("CreatedQuestions", fields: [createdById], references: [userID])
  updatedBy          User                 @relation("UpdatedQuestions", fields: [updatedById], references: [userID])
  UserQuestionStatus UserQuestionStatus[]
}

model ListQuestion {
  id         String   @id @default(uuid()) @db.Uuid
  listID     String   @db.Uuid
  questionID String   @db.Uuid
  isStarred  Boolean  @default(false)
  isDeleted  Boolean  @default(false)
  list       List     @relation(fields: [listID], references: [listID])
  question   Question @relation(fields: [questionID], references: [questionID])

  @@unique([listID, questionID])
}

model UserQuestionStatus {
  id          String   @id @default(uuid()) @db.Uuid
  userID      String   @db.Uuid
  listID      String   @db.Uuid
  questionID  String   @db.Uuid
  done        Boolean  @default(false)
  important   Boolean  @default(false)
  review      Boolean  @default(false)
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @updatedAt @db.Timestamp(6)
  createdById String   @db.Uuid
  updatedById String   @db.Uuid
  createdBy   User     @relation("UserQuestionStatusCreatedBy", fields: [createdById], references: [userID])
  list        List     @relation(fields: [listID], references: [listID])
  question    Question @relation(fields: [questionID], references: [questionID])
  updatedBy   User     @relation("UserQuestionStatusUpdatedBy", fields: [updatedById], references: [userID])
  user        User     @relation("UserQuestionStatuses", fields: [userID], references: [userID])

  @@unique([userID, listID, questionID])
}

model Tag {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @db.VarChar(50)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
  lists     List[]   @relation("ListToTag")
}

model ContactUs {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @db.VarChar(100)
  email     String   @db.VarChar(100)
  subject   String   @db.VarChar(200)
  message   String   @db.VarChar(500)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
}

model session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}

model AuditTrail {
  id           String   @id @default(uuid()) @db.Uuid
  action       String   @db.VarChar(50)
  actorID      String   @db.Uuid
  tableName    String   @db.VarChar(100)
  recordId     String   @db.Uuid
  previousData Json?    @db.Json
  newData      Json?    @db.Json
  timestamp    DateTime @default(now())
  actor        User     @relation(fields: [actorID], references: [userID])
}

enum AccessStatus {
  PENDING
  APPROVED
  REJECTED
}

